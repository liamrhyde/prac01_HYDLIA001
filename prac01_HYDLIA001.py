#!/usr/bin/python3"""Python Practical TemplateKeegan CrankshawReadjust this Docstring as follows:Names: <Liam Hyde>Student Number: <HYDLIA001>Prac: <Prac 1>Date: <23/07/2019>"""# import Relevant Libraresimport RPi.GPIO as GPIOimport timeimport itertools# Logic that you write#PIN 18,16 is input#PIN 9,14 is ground#PIN 11,13,15 is output#print("write your logic here")#valuesvalue = 0                #sets initial value to 0bitpattern = 0           #sets bitpattern to to binary equivalent of valuebitpatternList = [0, 0, 0, 0, 0]      #a list to be filled with a bitpattern#initialiseGPIO.setmode(GPIO.BOARD)GPIO.setup(11, GPIO.OUT)GPIO.setup(13, GPIO.OUT)GPIO.setup(15, GPIO.OUT)GPIO.setup(18, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)print('18 pull down (input)')time.sleep(.2)GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)print('16 pull down (input)')time.sleep(.2)GPIO.output(11, 0)print('11 off (output LED 1)')time.sleep(.2)GPIO.output(13, 0)print('13 off (output LED 2)')time.sleep(.2)GPIO.output(15, 0)print('15 off (output LED 3)')time.sleep(.2)def binary_outputs(bitpattern):    #converts bitpattern to a list and passes back to the calling function so it can select its bit number    global bitpatternList    print(bitpattern)    bitpatternListLocal = []    for i in str(bitpattern):        bitpatternListLocal.append(i)    bitpatternList = bitpatternListLocal[2:5]    if len(bitpatternList) < 2:        bitpatternList.insert(0, '0')        bitpatternList.insert(0, '0')    elif len(bitpatternList) in range(2, 3):        bitpatternList.insert(0, '0')    print(bitpatternList)    return(bitpatternList)def count_up(channel=18):    #single button press counts up    global value    value = value+1                                 #increments value    if value > 7:        value = 0    bitpattern = bin(value)    binary_outputs(bitpattern)    print('Count up pressed. New value:', int(value))    display_output()def count_down(channel=16):    #single button press counts down    global value    value = value-1                                 #decrements value    if value < 0:        value = 7    bitpattern = bin(value)    binary_outputs(bitpattern)    print('Count down pressed. New value:', int(value))    display_output()def display_output():    LEDbitpatternOutput = map(int, bitpatternList)    LED1=LEDbitpatternOutput[2]    LED2=LEDbitpatternOutput[1]    LED3=LEDbitpatternOutput[0]    print(LED1, LED2, LED3)    GPIO.output(11, LED1)    GPIO.output(13, LED2)    GPIO.output(15, LED3)GPIO.add_event_detect(18, GPIO.RISING, callback=count_up, bouncetime=750)GPIO.add_event_detect(16, GPIO.RISING, callback=count_down, bouncetime=750)def main():     pass# Only run the functions ifif __name__ == "__main__":    # Make sure the GPIO is stopped correctly    try:        while True:            main()    except KeyboardInterrupt:        print("Exiting gracefully")        # Turn off your GPIOs here        GPIO.cleanup()#    except e:#        GPIO.cleanup()#        print("Some other error occurred")#        print(e.message)